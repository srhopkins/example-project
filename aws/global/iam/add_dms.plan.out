Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

data.aws_caller_identity.current: Refreshing state...
aws_iam_role.role: Refreshing state... (ID: dba-masters)
aws_iam_role_policy_attachment.s3: Refreshing state... (ID: dba-masters-20180112191656907600000001)
aws_iam_role_policy_attachment.rds: Refreshing state... (ID: dba-masters-20180112191656912400000002)
aws_iam_role_policy_attachment.ec2: Refreshing state... (ID: dba-masters-20180112191656915600000003)

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

+ aws_iam_policy.dms
      id:          <computed>
      arn:         <computed>
      description: "Policy for Database Migration Service"
      name:        "DMSAdmin"
      path:        "/"
      policy:      "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"dms:*\",\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"kms:ListAliases\", \n                \"kms:DescribeKey\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:GetRole\",\n                \"iam:PassRole\",\n                \"iam:CreateRole\",\n                \"iam:AttachRolePolicy\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:DescribeVpcs\",\n                \"ec2:DescribeInternetGateways\",\n                \"ec2:DescribeAvailabilityZones\",\n                \"ec2:DescribeSubnets\",\n                \"ec2:DescribeSecurityGroups\",\n                \"ec2:ModifyNetworkInterfaceAttribute\",\n                \"ec2:CreateNetworkInterface\",\n                \"ec2:DeleteNetworkInterface\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"cloudwatch:Get*\",\n                \"cloudwatch:List*\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"logs:DescribeLogGroups\",\n                \"logs:DescribeLogStreams\",\n                \"logs:FilterLogEvents\",\n                \"logs:GetLogEvents\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"redshift:Describe*\",\n                \"redshift:ModifyClusterIamRoles\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n} \n"

  + aws_iam_role_policy_attachment.dms
      id:          <computed>
      policy_arn:  "${aws_iam_policy.dms.arn}"
      role:        "dba-masters"
Plan: 2 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

Releasing state lock. This may take a few moments...
